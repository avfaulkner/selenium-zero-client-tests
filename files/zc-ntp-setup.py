# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestZcntpsetup():
  def setup_method(self, method):
    self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub', desired_capabilities=DesiredCapabilities.CHROME)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_zcntpsetup(self):
    # Test name: zc-ntp-setup
    # Step # | name | target | value
    # 1 | open | /configuration/time.html | 
    self.driver.get("https://192.168.0.108/configuration/time.html")
    # 2 | setWindowSize | 1223x862 | 
    self.driver.set_window_size(1223, 862)
    # 3 | click | name=enable_ntp | 
    self.driver.find_element(By.NAME, "enable_ntp").click()
    # 4 | click | css=tr:nth-child(4) input:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) input:nth-child(2)").click()
    # 5 | click | name=ntp_dns_name | 
    self.driver.find_element(By.NAME, "ntp_dns_name").click()
    # 6 | type | name=ntp_dns_name | pool.ntp.org
    self.driver.find_element(By.NAME, "ntp_dns_name").send_keys("pool.ntp.org")
    # 7 | click | css=tr:nth-child(14) input:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(14) input:nth-child(2)").click()
    # 8 | assertAlert | Please select a time zone | 
    assert self.driver.switch_to.alert.text == "Please select a time zone"
    # 9 | click | css=body | 
    self.driver.find_element(By.CSS_SELECTOR, "body").click()
    # 10 | click | name=enable_ntp | 
    self.driver.find_element(By.NAME, "enable_ntp").click()
    # 11 | click | css=tr:nth-child(4) input:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) input:nth-child(2)").click()
    # 12 | click | name=ntp_dns_name | 
    self.driver.find_element(By.NAME, "ntp_dns_name").click()
    # 13 | type | name=ntp_dns_name | pool.ntp.org
    self.driver.find_element(By.NAME, "ntp_dns_name").send_keys("pool.ntp.org")
    # 14 | click | id=time_zone_offset | 
    self.driver.find_element(By.ID, "time_zone_offset").click()
    # 15 | select | id=time_zone_offset | label=(UTC-8:00) Pacific/Pitcairn
    dropdown = self.driver.find_element(By.ID, "time_zone_offset")
    dropdown.find_element(By.XPATH, "//option[. = '(UTC-8:00) Pacific/Pitcairn']").click()
    # 16 | click | id=time_zone_offset | 
    self.driver.find_element(By.ID, "time_zone_offset").click()
    # 17 | click | id=time_zone_offset | 
    self.driver.find_element(By.ID, "time_zone_offset").click()
    # 18 | select | id=time_zone_offset | label=(UTC-8:00) America/Vancouver
    dropdown = self.driver.find_element(By.ID, "time_zone_offset")
    dropdown.find_element(By.XPATH, "//option[. = '(UTC-8:00) America/Vancouver']").click()
    # 19 | click | id=time_zone_offset | 
    self.driver.find_element(By.ID, "time_zone_offset").click()
    # 20 | click | css=tr:nth-child(14) input:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(14) input:nth-child(2)").click()
    # 21 | click | name=continue_button | 
    self.driver.find_element(By.NAME, "continue_button").click()
  
